%header.inversed#menu
  .wrapper
    %h1!= "#{ link_to t('company'), home_path } <em>/ #{ t '.name' }</em>"

    #totop
      %a.scroll{ href: '#top' } &uarr;

    %nav
      %ul.secondary
        %li
          %a{ href: locale_path }= t 'navigation.locale'
        %li
          %a{ href: manifesto_path }= t 'navigation.manifesto'
        %li
          %a.scroll{ href: '#contact' }= t 'navigation.contact'

%section
  %h2 Гибкие методологии в веб-разработке
  %p.description
    Зачастую даже в крупных компаниях разработка программного обеспечения происходит без единого плана.
    В результате получается не цельный продукт, а смесь обособленных решений.
    Есть выход: надо упорядочить процесс, использовать методологию.

  %p
    Зачастую даже в крупных компаниях разработка программного обеспечения происходит без единого плана. Процесс разработки не зафиксирован, каждый раз все происходит по-разному. В общем, это можно описать так: программисты пишут код, тестировщики его проверяют. В результате получается не цельный продукт, а смесь обособленных решений. Такой подход может подойти для небольшого проекта, но когда проект начинает расти, неизбежно появляется все больше ошибок, сроки затягиваются, поддержка и развитие становятся практически невозможными.

  %p
    Есть выход: надо как-то упорядочить процесс, использовать методологию. Методология &mdash; детальное описание процесса разработки, план того, как надо действовать при работе над любым проектом. С помощью методологии можно сделать разработку более эффективной и предсказуемой.

  %p
    Наиболее общая классификация методологий разработки &mdash; жесткие (тяжеловесные) и гибкие (легковесные).

    Жесткие методологии давно пришли в программирование из других инженерных дисциплин. Однако они не всегда эффективны, требуют выполнения стольких различных предписаний, что сам процесс разработки сильно замедляется. Отсюда их название &mdash; тяжеловесные.

  %p
    Гибкие методологии появились гораздо позже. Привлекательность гибких методологий &mdash; в отсутствии присущего жестким методологиям, бюрократизма. Можно сказать, что гибкие методологии &mdash; попытка достичь компромисса между перегруженным формальностями процессом разработки и полным хаосом.

  %p
    Основное отличие жестких и гибких методологий &mdash; природа процесса разработки. Если в жестких методологиях процесс довольно предсказуем, т.к. до начала работы было проведено детальное планирование разработки всего приложения, то в гибких методологиях процесс адаптируется к изменяющимся в ходе разработки условиям внешней среды и изменениям в требованиях. При использовании гибких методологий разработка сводится к серии коротких циклов, называемых итерациями, которые обычно длятся одну-две недели.  В конце каждой итерации приложение включает только часть функциональности, но в целом работает. Планирование производится только для текущей итерации, т.к. в ходе ее реализации происходит переоценка приоритетов.

  %p
    Это обуславливает реагирование на изменения. Для жестких методологий сопротивляться всяким изменениям совершенно естественно, вносить изменения очень сложно. Гибкие методологии, напротив, изменения приветствуют, они рассчитаны на них.

  %p
    Основной метрикой гибких методологий является рабочий продукт. Они ориентированы на человека, а не на сам процесс. Отдавая предпочтение непосредственному общению, гибкие методологии уменьшают объем письменной документации по сравнению с другими методами. Многие ошибочно полагают, что гибкие методологии поощряют отсутствие документирования и планирования, но это не так. В действительности, процесс обладает гораздо более высокой управляемостью.

  %p
    Мы считаем гибкие методологии очень уместными в сфере веб-разработки и используем их при работе над всеми своими проектами.

  %p.author Виктория Смольская
  %p.date 2 февраля 2009
